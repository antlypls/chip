// Generated by CoffeeScript 1.9.3
(function() {
  var $, DATA_H, DATA_LENGTH, DATA_W, DIE, DIE_CROWD, DIE_STARVE, LIVE, SPAWN, SPAWN_POWER, canvas, ctx, data, draw, drawdata, j, len, newdata, raf, ref, rel, setup, started, step, x;

  $ = document.querySelector.bind(document);

  canvas = $('#chip_canvas');

  ctx = canvas.getContext("2d");

  DATA_W = 250;

  DATA_H = 250;

  DATA_LENGTH = DATA_W * DATA_H;

  data = new Uint8ClampedArray(DATA_LENGTH);

  newdata = new Uint8ClampedArray(DATA_LENGTH);

  drawdata = new Uint8ClampedArray(DATA_LENGTH * 4);

  setup = function() {
    var i, j, k, ref, ref1, results;
    for (i = j = 0, ref = data.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      data[i] = Math.random() * 255;
    }
    results = [];
    for (i = k = 0, ref1 = drawdata.length; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
      results.push(drawdata[i] = i % 4 === 3 ? 255 : void 0);
    }
    return results;
  };

  setup();

  ctx.scale(canvas.width / DATA_W, canvas.height / DATA_H);

  ctx.globalCompositeOperation = "copy";

  ctx.imageSmoothingEnabled = false;

  ref = 'moz webkit ms'.split(' ');
  for (j = 0, len = ref.length; j < len; j++) {
    x = ref[j];
    ctx[x + "ImageSmoothingEnabled"] = false;
  }

  draw = function() {
    var i, imageData, k, ref1;
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    for (i = k = 0, ref1 = drawdata.length; k <= ref1; i = k += 4) {
      drawdata[i] = drawdata[i + 1] = drawdata[i + 2] = data[i >> 2];
    }
    imageData = new ImageData(drawdata, DATA_W, DATA_H);
    ctx.putImageData(imageData, 0, 0);
    return ctx.drawImage(ctx.canvas, 0, 0);
  };

  rel = function(n, x, y) {
    var b, i;
    i = n + x + y * DATA_W;
    b = n % DATA_W + x;
    if (b > DATA_W || b < 0 || i >= DATA_LENGTH || i < 0) {
      return 0;
    }
    return data[i];
  };

  window.rel = rel;

  SPAWN = 2.0;

  LIVE = 2.0;

  DIE = 3.0;

  SPAWN_POWER = 0.5;

  DIE_STARVE = 1 / 1.1;

  DIE_CROWD = 1 / 1.1;

  step = function() {
    var alive, avg, i, k, l, len1, n, neighbours, ref1, ref2, sum;
    for (i = k = 0, ref1 = data.length; k < ref1; i = k += 1) {
      neighbours = [rel(i, -1, -1), rel(i, 0, -1), rel(i, +1, -1), rel(i, -1, 0), rel(i, +1, 0), rel(i, -1, +1), rel(i, 0, +1), rel(i, +1, +1)];
      alive = 0;
      sum = 0;
      for (l = 0, len1 = neighbours.length; l < len1; l++) {
        n = neighbours[l];
        if (n >= 127) {
          alive++;
        }
        sum += n;
      }
      avg = sum / neighbours.length;
      if (sum < LIVE * 255) {
        newdata[i] = data[i] * DIE_STARVE;
      } else if (sum > DIE * 255) {
        newdata[i] = data[i] * DIE_CROWD;
      } else if (sum >= SPAWN * 255) {
        newdata[i] = data[i] * (1 - SPAWN_POWER) + 255 * SPAWN_POWER;
      } else {
        newdata[i] = data[i];
      }
    }
    return ref2 = [newdata, data], data = ref2[0], newdata = ref2[1], ref2;
  };

  started = false;

  raf = function() {
    started = true;
    step();
    draw();
    return requestAnimationFrame(raf);
  };

  raf();

  canvas.addEventListener('click', function() {
    if (started) {
      return setup();
    } else {
      return raf();
    }
  });

}).call(this);
